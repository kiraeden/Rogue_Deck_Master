To-Do List for Magic Social Site:
	1. Design the Home page
		a. I'm thinking this should include the most ten recent deck list postings for each format
		
	2. Implement the Login system
	
	3. Implement the Collection system
		a. Need to create the database table system.
		b. Need to retrieve the multiverse ID for cards so I can display images and link to gatherer correctly.
	
	4. Add the javascript necessary to show a popup window displaying a card image when the user mouses over a card name.
		a. To do this, I will need to reference another JSON file containing the card image id used by Wizards Gatherer website. I know it exists, but I think it is also a part of a much larger JSON file that might not be as suited to searching.
		b. So the multiverseid that I would need to retrieve the card image from gatherer is stored in the AllSets.JSON file. There are two ways I can go about solving this problem:
			i. The first is that I can use the AllSets.json file directly for all my work. What worries me about this solution is that it would be multiple FOR loops to seek through the file as well as the fact that the file is about 3 times the size of the file im already seeking through.
			ii. The second option is to create a new JSON file that contains only the information I need to know about the cards. The problem is at the moment that, while I'm sure this is possible, I'm not sure how to do it. There is also the problem to solve that certain sets have reprints of cards and apparently each set's printing has its own multiverseid in gatherer, so I'd have to sort out how to choose the newest copy to use. TCGPlayer's solution to this problem was somewhat elegant in that they had you adding cards to your collection by searching a specific set. I may want to look into this solution as an alternate possibility as well, although I think the need to trim down my JSON files is still relevant.
	
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Build Notes:
		*I have figured out how to reference decks into a new php document via links creating GET requests to deck.php, my next step now is to setup the editing page, using a similar system. I may want to add a link to edit a deck on the view decks page instead of having it be two seperate/repetitive pages.
	
		* My idea for adding a card to a collection is to perform autocomplete using Jquery based on the MTG JSON files available on mtgjson with a single input field accompanied by a numerical entry field, and perform a post request with an "Add" button to the side of the input field.
			*In order for the card to be recognized later if/when I am able to implement the image lookup for cards I may need to verify that the card name input matches a JSON entry via PHP to avoid additional characters being added to a card name.
			*Once I learn enough JS to make the autocomplete feature function, one project will be figuring out how best to lookup images to use for the page. I have solved the image source problem atleast, I can use Gatherer for my image source easily via http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=180607&type=card I just have to modify the multiverseid=#
		*Angular.JS handles form validation (jquery may do this as well, not yet clear) may be important for user login fields later.
		
		*Use jQuery for the autocomplete features, and AJAX to perform an XMLHTTP request to the server to get a more responsive feedback for the collection list as well as adding cards to a collection.
			*I do need to figure out if XML files can actually hold this kind of (potentially) unbounded data, since a collection could be huge, and having a large collection could cause the load times for the XML to be egregious.
			*I can do a similar AJAX call out to compare the XML collection contents to the database contents of a decklist. I may even want to consider storing deck lists in XML instead of SQL for faster lookups, and that would make comparisons between the two more straightforward.
			*Due to the size of the JSON files for all magic cards, it may be necessary to base the autocomplete lookup on just what sets are actually legal in Standard and Modern respectively. For Legacy/Vintage/Casual/Commander, I may need to reduce the full JSON set file to just names for my purposes. I could just write a program to do this for me. To further reduce seek times, I could also split up the files into their first alphabetical characters and have the system only check against the first typed letter.
			
			
		*Okay, so I have the autocomplete functional, the next task, I think, is to create a login system. I think this should come next as most of the items below it depend on it, and while I could rewrite them later, I'd rather not.
		
		*now that I have the PHP version of the card entry sorted out, the next two tasks are to make the data from the deck information form appear in a nicer format above the decklist.
			*After that, I need to make it so that the decklist appears below the card entry field as the user is entering cards. Preferably in the format "Creatures, Lands, Spells, Sideboard"
			
		*SPECIAL NOTE: Creature types such as Enchantment Creature appear together in the type section of the JSON doc, so to make them appear correctly, I may have to do some parsing of the 'types' to check for the Creature type specifically.
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	Site Design Notes:
		* For the Home pages, I'm thinking about having links to a standard compendium of deck lists currently running around in the format, and maybe an estimate of their win chance against another deck archetype. 
			*Maybe using metrics such as % of keep-able opening hands, and win percentages against basic archetypes. Something like a one-stop-shop for Format decks and information.
			
		* For adding value to the design, I may need to start thinking about using the format to limit decklists. This also means I'll need to create different JSON lists for each format, and perhaps banlists as JSON files for each format with a ban list as well.
		* For special formats such as commander or tiny leader, I may want to think about making special deck entry features for those types of formats.